schema {
  query: Query
  mutation: Mutation
}

type Query {
  # Query to get the product by id
  getProduct(productId: Long!): Product!
  # Query to get the products with sort and pagination
  getProducts(sort: ProductSortEntry, limit: Long, offset: Long): [Product!]!
  # Query to get the products by filter
  getProductsByFilter(filter: ProductFilterInput!): [Product!]!
  # Query to get the root catalog
  getRootCatalog: Catalog!
  # Query to get the catalog by id
  getCatalog(catalogId: Long!): Catalog!
}

type Mutation {
  registrationStart(phoneOrEmail: String!): RegistrationStep!
  registrationConfirmByCode(continuationCode: String!, manualCode: String!): RegistrationStep!
  registrationConfirmByLink(linkCode: String!): RegistrationStep!
  registrationConfirmResend(continuationCode: String!): RegistrationStep!
  registrationFinish(continuationCode: String!, userData: RegistrationData!): User!
  addProductToUserCart(userId: Long!, productId: Long!): Cart!
}

type User {
  email: String
  phone: String
  avatar: Image
  firstName: String!
  middleName: String
  secondName: String!
  createAt: LocalDateTime!
  addresses: [Address!]!
}

type Address {
  country: String
  region: String
  city: String
  street: String
  home: Int
  flat: Int
  floor: Int
  entrance: Int
  zipCode: String
}

type Cart {
  secret: String!
  amount: String!
  discount: String!
  items: [CartItem!]!
}

type CartItem {
  count: Int!
  amount: String!
  discount: String!
  product: Product!
}

type Product {
  id: Long!
  title: String!
  description: String
  price: String!
  originalPrice: String
  availability: Availability!
  availableAt: Date
  createAt: LocalDateTime!
  updateAt: LocalDateTime!
  catalog: Catalog!
  images: [Image!]!
  attributes: [ProductAttribute!]!
}

type ProductAttribute {
  name: String!
  value: String!
}

type Attribute {
  name: String!
  values: [String!]!
}

type Catalog {
  id: Long!
  name: String!
  parent: Catalog
  children: [Catalog!]!
  attributes: [Attribute!]!
}

type Image {
  id: Long!
  mimeType: String!
  height: Int!
  width: Int!
  dataSize: String!
  createAt: LocalDateTime!
}

input ProductFilterInput {
  entries: [ProductFilterEntry]
  sort: ProductSortEntry
  limit: Long
  offset: Long
}

input ProductFilterEntry {
  type: ProductFilterType!
  value: Object
  values: [Object!]
}

input ProductSortEntry {
  field: ProductSortField!
  order: SortOrder!
}

input AttributeFilterEntry {
  name: String!
  value: String
  values: [String]
}

type RegistrationStep {
  status: RegistrationStatus!
  continuationCode: String!
}

input RegistrationData {
  password: String!
  firstName: String!
  middleName: String!
  secondName: String!
}

enum Availability {
  IN_STOCK
  NOT_AVAILABLE
  ON_ORDER
}

enum ProductFilterType {
  ID
  CATALOG
  QUERY
  PRICE_FROM
  PRICE_TO
  AVAILABILITY
  ATTRIBUTES
}

enum ProductSortField {
  ID
  PRICE
  CREATE_AT
  # SCORE
  # REVIEW_COUNT
}

enum SortOrder {
  ASC
  DESC
}

enum RegistrationStatus {
  EMAIL_CONFIRMATION
  PHONE_CONFIRMATION
  PERSONAL_DATA_AWAIT
  FAIL
}

scalar Long
scalar Object
scalar BigDecimal
scalar Date
scalar LocalDate
scalar LocalDateTime
scalar LocalTime
scalar OffsetDateTime
scalar YearMonth
scalar Duration
